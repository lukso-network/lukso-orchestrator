#!/usr/bin/env bash

##### binary behavior
COMMAND=$1
COMMAND_ARG=$2
USE_CONFIG_FILE=false
FORCE=false
#####

##### network info
CHAIN_ID=""
NETWORK_ID=""
#####

##### default client values
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  PLATFORM="Linux"
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  PLATFORM="Darwin"
fi

ARCHITECTURE=$(uname -m)
LUKSO_SCRIPT_VERSION="v1.6"

RUN_DATE=$(date '+%Y-%m-%d__%H-%M-%S')
NETWORK="l15-prod"
IS_VALIDATOR=false
RUN_LUKSO_STATUS=false
PAN_ETHSTATS=""
VAN_ETHSTATS=""
COINBASE="0x616e6f6e796d6f75730000000000000000000000"

if [[ "$PLATFORM" == "Linux" ]]; then
  LUKSO_HOME="$HOME/.lukso"
fi

if [[ "$PLATFORM" == "Darwin" ]]; then
  LUKSO_HOME="$HOME/Library/LUKSO"
fi

DATADIR="$LUKSO_HOME/$NETWORK/datadirs"
LOGSDIR="$LUKSO_HOME/$NETWORK/logs"
NODE_NAME="$(LC_CTYPE=C LANG=C tr -dc A-F0-9 </dev/urandom | head -c 8)"
EXTERNAL_IP=$(curl -s ident.me)

###### General variables
VANGUARD_RPC="127.0.0.1:4000"
ORC_PANDORA_RPC="ws://127.0.0.1:8546"
######

###### Orchestrator settings
ORC_HTTP_ADDR="127.0.0.1"
ORC_HTTP_PORT="7877"
ORC_WS_ADDR="127.0.0.1"
ORC_WS_PORT="7878"
ORC_VERBOSITY=debug
ORCHESTRATOR_VANGUARD_RPC_ENDPOINT=$VANGUARD_RPC
ORCHESTRATOR_PANDORA_RPC_ENDPOINT=$ORC_PANDORA_RPC
######

###### Pandora settings
PANDORA_PORT="30405"
PANDORA_BOOTNODES=""
PANDORA_HTTP_ADDR="127.0.0.1"
PANDORA_HTTP_PORT="8545"
PANDORA_WS_ADDR="127.0.0.1"
PANDORA_WS_PORT="8546"
PANDORA_METRICS=false
PANDORA_NODEKEY=""
PANDORA_VERBOSITY=debug
PAN_WS_MINER_NOTIFY="ws://127.0.0.1:7878"
PAN_HTTP_MINER_NOTIFY="http://127.0.0.1:7877"
CORS_DOMAIN=""
######

###### Vanguard
VANGUARD_VERBOSITY=debug
VANGUARD_HTTP_WEB3PROVIDER="http://127.0.0.1:8545"
VANGUARD_RPC_HOST="127.0.0.1"
VANGUARD_ORC_RPC_PROVIDER="http://127.0.0.1:7877"
VANGUARD_BOOTNODES=""
VANGUARD_P2P_PRIV_KEY=""
VANGUARD_P2P_HOST_DNS=""
VANGUARD_RPC_PORT="4000"
VANGUARD_UDP_PORT="12000"
VANGUARD_TCP_PORT="13000"
VANGUARD_GRPC_GATEWAY_PORT="3500"
VAN_MIN_SYNC_PEERS="2"
VAN_MAX_P2P_PEERS="50"
VAN_ETHSTATS_METRICS="http://127.0.0.1:8080/metrics"
######

###### Validator
KEYS_DIR="$LUKSO_HOME/$NETWORK"
WALLET_DIR="$LUKSO_HOME/$NETWORK/vanguard_wallet"
VALIDATOR_PASSWORD_FILE="$WALLET_DIR/password"
VALIDATOR_VERBOSITY=debug
VALIDATOR_BEACON_RPC_PROVIDER=$VANGUARD_RPC
VALIDATOR_PANDORA_HTTP_PROVIDER="http://127.0.0.1:8545"
######

###### Eth2Stats
ETH2STATS_BEACON_ADDR=$VANGUARD_RPC
######

###### for config tool
CONFIG_DATA=()
######

function parse_yaml() {
  local prefix=""
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @ | tr @ '\034')
  LC_CTYPE=C LANG=C sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" $1 |
    awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

parse_config() {
  eval $(parse_yaml $1)
}

download() {
  URL="$1"
  LOCATION="$2"
  if [[ $PLATFORM == "Linux" ]]; then
    if ! wget -q --spider "$URL"; then
      echo "File not found, check URL: $URL"
      exit
    fi
    sudo wget -O $LOCATION $URL
  fi

  if [[ $PLATFORM == "Darwin" ]]; then
    STATUS_CODE=$(curl -L -s -o /dev/null -I -w "%{http_code}" $URL)
    if [[ $STATUS_CODE != "200" ]]; then
      echo "File not found, check URL: $URL"
      exit
    fi
    sudo curl -o $LOCATION -Lk $URL
  fi
}

download_binary() {
  CLIENT="$1"
  TAG="$2"

  case $CLIENT in
  lukso-orchestrator)
    REPO="lukso-orchestrator"
    ;;

  pandora)
    REPO="pandora-execution-engine"
    ;;

  vanguard)
    REPO="vanguard-consensus-engine"
    ;;

  lukso-validator)
    REPO="vanguard-consensus-engine"
    ;;

  lukso-deposit-cli)
    REPO="network-deposit-cli"
    ;;

  esac

  mkdir -p /opt/lukso/binaries/$CLIENT/$TAG
  download https://github.com/lukso-network/"$REPO"/releases/download/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE /opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE
  sudo chmod +x /opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE
}

download_eth2stats_binary() {
  TAG="$1"

  mkdir -p /opt/lukso/binaries/eth2stats-client/$TAG
  download https://github.com/lukso-network/network-vanguard-stats-client/releases/download/$TAG/eth2stats-client /opt/lukso/binaries/eth2stats-client/$TAG/eth2stats-client
  sudo chmod +x /opt/lukso/binaries/eth2stats-client/$TAG/eth2stats-client
}

bind_binary() {
  CLIENT="$1"
  TAG="$2"
  if [[ ! -f /opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE ]]; then
    download_binary $CLIENT $TAG
  fi

  sudo ln -sf "/opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE" /usr/local/bin/$CLIENT
}

bind_eth2stats_binary() {
  TAG="$1"
  if [[ ! -f /opt/lukso/binaries/eth2stats-client/$TAG/eth2stats-client ]]; then
    download_eth2stats_binary $TAG
  fi

  sudo ln -sf "/opt/lukso/binaries/eth2stats-client/$TAG/eth2stats-client" /usr/local/bin/eth2stats-client
}

bind_binaries() {
  echo
}

generate_keys() {
  read -p "Where to store deposit keys? Default: [$KEYS_DIR] " INPUT
  if [[ -n "$INPUT" ]]; then
    KEYS_DIR=$INPUT
  fi
  eval KEYS_DIR=$KEYS_DIR
  mkdir -p $KEYS_DIR
  read -p "How many validators? " VALIDATORS_NUMBER
  echo "Running lukso-deposit-cli..."

  lukso-deposit-cli new-mnemonic \
    --chain $NETWORK \
    --mnemonic_language english \
    --folder $KEYS_DIR \
    --num_validators $VALIDATORS_NUMBER
}

import_accounts() {

  if [[ ! -d $WALLET_DIR ]]; then
    mkdir -p $WALLET_DIR
  fi

  if [[ ! -f $VALIDATOR_PASSWORD_FILE ]]; then
    while [[ ! $INPUT =~ ^(n|N|y|Y)$ ]] ; do
      read -r -p "No password file found do you want to create it? (Y/n) " INPUT
    done

    if [[ $INPUT =~ ^(y|Y)$ ]]; then
      read -r -p "Enter your password " -s PASSWORD
      echo
      echo $PASSWORD > "$WALLET_DIR/password"
      echo "Saved to $WALLET_DIR/password"
    fi

  fi

  if [[ -z $OVERRIDE_KEYS_DIR ]]; then
    KEYS_DIR="$KEYS_DIR/validator_keys"
    read -p "Where do you have deposit keys? Default: [$KEYS_DIR] " INPUT
    eval INPUT="$INPUT"
      if [[ -n "$INPUT" ]]; then
        KEYS_DIR=$INPUT
      fi
  fi

  if [[ -z $OVERRIDE_WALLET_DIR ]]; then
    read -p "Where to store wallet? Default: [$WALLET_DIR] " INPUT
    eval INPUT="$INPUT"
      if [[ -n "$INPUT" ]]; then
        WALLET_DIR=$INPUT
      fi
  fi

  ARGUMENTS=(
    "--keys-dir=$KEYS_DIR"
    "--wallet-dir=$WALLET_DIR"
  )

  if [[ -n $KEYS_PASSWORD_FILE ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--account-password-file=$KEYS_PASSWORD_FILE")
  fi

  if [[ -n $VALIDATOR_PASSWORD_FILE ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--wallet-password-file=$VALIDATOR_PASSWORD_FILE")
  fi

  lukso-validator accounts import \
  "${ARGUMENTS[@]}"
}

parse_config_field() {
  VALUE="$1"
  DEFAULT="$3"
  LABEL="$2 [default: $DEFAULT]: "
  read -p "$LABEL" INPUT
  eval INPUT="$INPUT"
  if [[ -z "$INPUT" ]]; then
    echo -e "\033[1A\033[2K$LABEL<Using default>"
    CONFIG_DATA+=("$VALUE: \"$DEFAULT\"")
  else
    CONFIG_DATA+=("$VALUE: \"$INPUT\"")
  fi
}

setup_config() {
  clear
  echo "This tool will create config file to be used with node."
  echo "Enter desired value or leave it empty to use default."
  echo "For paths you can use variables like \$PWD or \".\" as they will be resolved"
  echo

  mkdir -p "$LUKSO_HOME/$NETWORK"
  DEFAULT="$LUKSO_HOME/$NETWORK/config.yaml"
  LABEL="Config file location [default: $DEFAULT]: "
  read -p "$LABEL" CONFIG_LOCATION
  eval CONFIG_LOCATION="$CONFIG_LOCATION"
  if [[ -z "$CONFIG_LOCATION" ]]; then
    echo -e "\033[1A\033[2K$LABEL<Using default>"
    CONFIG_LOCATION="$DEFAULT"
  fi

  parse_config_field "COINBASE" "Enter your coinbase:" "0x616e6f6e796d6f75730000000000000000000000"
  parse_config_field "WALLET_DIR" "Type wallet location:" "$LUKSO_HOME/$NETWORK/vanguard_wallet"
  parse_config_field "DATADIR" "Type data directory (chain will be stored there) location:" "$LUKSO_HOME/$NETWORK/datadirs"
  parse_config_field "LOGSDIR" "Type logs location:" "$LUKSO_HOME/$NETWORK/logs"
  parse_config_field "NODE_NAME" "Type name of the node:" "$NETWORK-$NODE_NAME"

  echo "Saving config to $CONFIG_LOCATION"
  printf '%s\n' "${CONFIG_DATA[@]}" >|"$CONFIG_LOCATION"
}

download_network_config() {
  NETWORK=$1
  CDN="https://storage.googleapis.com/l15-cdn/networks/$NETWORK"
  sudo mkdir -p /opt/lukso/networks/$NETWORK/config
  TARGET=/opt/lukso/networks/$NETWORK/config
  download $CDN/network-config.yaml?ignoreCache=1 $TARGET/network-config.yaml
  download $CDN/pandora-genesis.json?ignoreCache=1 $TARGET/pandora-genesis.json
  download $CDN/vanguard-genesis.ssz?ignoreCache=1 $TARGET/vanguard-genesis.ssz
  download $CDN/vanguard-config.yaml?ignoreCache=1 $TARGET/vanguard-config.yaml
  download $CDN/pandora-nodes.json?ignoreCache=1 $TARGET/pandora-nodes.json
}

pick_network() {
  NETWORK=$1
  if [[ ! -d /opt/lukso/networks/"$NETWORK" ]]; then
    download_network_config $NETWORK
  fi
}

check_validator_requirements() {
  CAN_VALIDATE=true
  if [[ ! -d $WALLET_DIR ]]; then
    echo "Cannot validate, wallet not found"
    CAN_VALIDATE=false
  fi

  if [[ -n $VALIDATOR_PASSWORD_FILE ]] && [[ ! -f $VALIDATOR_PASSWORD_FILE ]]; then
    echo "Cannot validate, password file not found"
    CAN_VALIDATE=false
  fi

  if [[ "$CAN_VALIDATE" == "false" ]]; then
    exit 1
  fi

}

start_orchestrator() {
  mkdir -p "$LOGSDIR"/orchestrator
  echo -n $RUN_DATE >|"$LOGSDIR"/orchestrator/current.tmp
  if [[ ! -d "$DATADIR/orchestrator" ]]; then
    mkdir -p $DATADIR/orchestrator
  fi
  nohup lukso-orchestrator --datadir=$DATADIR/orchestrator \
    --vanguard-grpc-endpoint=$ORCHESTRATOR_VANGUARD_RPC_ENDPOINT \
    --http \
    --http.addr=$ORC_HTTP_ADDR \
    --http.port=$ORC_HTTP_PORT \
    --ws \
    --ws.addr=$ORC_WS_ADDR \
    --ws.port=$ORC_WS_PORT \
    --pandora-rpc-endpoint=$ORCHESTRATOR_PANDORA_RPC_ENDPOINT \
    --verbosity=$ORC_VERBOSITY >|$LOGSDIR/orchestrator/orchestrator_"$RUN_DATE".log 2>&1 &
  disown
}

start_pandora() {

  case $PANDORA_VERBOSITY in
  silent)
    PANDORA_VERBOSITY=0
    ;;
  error)
    PANDORA_VERBOSITY=1
    ;;
  warn)
    PANDORA_VERBOSITY=2
    ;;
  info)
    PANDORA_VERBOSITY=3
    ;;
  debug)
    PANDORA_VERBOSITY=4
    ;;
  detail|trace)
    PANDORA_VERBOSITY=5
    ;;
  esac

  mkdir -p "$LOGSDIR"/pandora
  echo -n $RUN_DATE >|"$LOGSDIR"/pandora/current.tmp
  if [[ ! -d "$DATADIR/pandora" ]]; then
    mkdir -p "$DATADIR/pandora"
  fi

  pandora --datadir $DATADIR/pandora init /opt/lukso/networks/$NETWORK/config/pandora-genesis.json &>/dev/null
  cp /opt/lukso/networks/"$NETWORK"/config/pandora-nodes.json $DATADIR/pandora/geth/static-nodes.json

  ARGUMENTS=(
    "--datadir=$DATADIR/pandora"
    "--networkid=$NETWORK_ID"
    "--port=$PANDORA_PORT"
    "--http"
    "--http.addr=$PANDORA_HTTP_ADDR"
    "--bootnodes=$PANDORA_BOOTNODES"
    "--http.port=$PANDORA_HTTP_PORT"
    "--ws"
    "--ws.addr=$PANDORA_WS_ADDR"
    "--ws.port=$PANDORA_WS_PORT"
    "--mine"
    "--miner.notify=$PAN_WS_MINER_NOTIFY,$PAN_HTTP_MINER_NOTIFY"
    "--miner.etherbase=$COINBASE"
    "--miner.gaslimit=80000000"
    "--syncmode=full"
    "--verbosity=$PANDORA_VERBOSITY"
  )

  if [[ $PANDORA_UNIVERSAL_PROFILE_EXPOSE ]] && [[ ! $PANDORA_UNSAFE_EXPOSE ]]; then
    API_ARGUMENTS=(
      "--http.api=net,eth,txpool,web3"
      "--ws.api=net,eth,txpool,web3"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${API_ARGUMENTS[@]}")
  fi

  if [[ $PANDORA_UNSAFE_EXPOSE ]]; then
    API_ARGUMENTS=(
      "--http.api=admin,net,eth,debug,miner,personal,txpool,web3"
      "--ws.api=admin,net,eth,debug,miner,personal,txpool,web3"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${API_ARGUMENTS[@]}")
  fi

  if [[ -n $CORS_DOMAIN ]]; then
    CORS_DOMAIN_FLAGS=(
      "--http.corsdomain=$CORS_DOMAIN"
      "--ws.origins=$CORS_DOMAIN"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${CORS_DOMAIN_FLAGS[@]}")
  fi

  if [[ -n $OVERRIDE_PANDORA_EXTERNAL_IP ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--nat=extip:$OVERRIDE_PANDORA_EXTERNAL_IP")
  else
    ARGUMENTS=("${ARGUMENTS[@]}" "--nat=extip:$EXTERNAL_IP")
  fi

  if $PANDORA_METRICS || $RUN_LUKSO_STATUS; then
    METRICS_FLAGS=(
      "--metrics"
      "--metrics.expensive"
      "--pprof"
      "--pprof.addr=127.0.0.1"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${METRICS_FLAGS[@]}")
  fi

  if [[ -n $PANDORA_NODEKEY ]]; then
    NODEKEY_FLAGS=(
      "--nodekey=$PANDORA_NODEKEY"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${NODEKEY_FLAGS[@]}")
  fi

  if [[ -n $PANDORA_RPCVHOSTS ]]; then
    RPCVHOSTS_FLAGS=(
      "--http.vhosts=$PANDORA_RPCVHOSTS"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${RPCVHOSTS_FLAGS[@]}")
  fi

  if [[ -n $PAN_ETHSTATS ]]; then
    ETHSTATS_FLAG=(
      "--ethstats=$NODE_NAME:$PAN_ETHSTATS"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${ETHSTATS_FLAG[@]}")
  fi

  nohup pandora \
    "${ARGUMENTS[@]}" \
    >|$LOGSDIR/pandora/pandora_"$RUN_DATE".log 2>&1 &
  disown
}

start_vanguard() {
  mkdir -p "$LOGSDIR"/vanguard
  echo -n $RUN_DATE >|"$LOGSDIR"/vanguard/current.tmp
  VANGUARD_BOOTNODES=(${VANGUARD_BOOTNODES//,/ })
  BOOTNODES_ARGS=()
  for n in "${VANGUARD_BOOTNODES[@]}"; do
    BOOTNODES_ARGS+=("--bootstrap-node=$n")
  done
  ARGUMENTS=(
    "--accept-terms-of-use"
    "--chain-id=$CHAIN_ID"
    "--network-id=$NETWORK_ID"
    "--genesis-state=/opt/lukso/networks/$NETWORK/config/vanguard-genesis.ssz"
    "--datadir=$DATADIR/vanguard/"
    "--chain-config-file=/opt/lukso/networks/$NETWORK/config/vanguard-config.yaml"
    "${BOOTNODES_ARGS[@]}"
    "--http-web3provider=$VANGUARD_HTTP_WEB3PROVIDER"
    "--deposit-contract=0x000000000000000000000000000000000000cafe"
    "--contract-deployment-block=0"
    "--rpc-host=$VANGUARD_RPC_HOST"
    "--monitoring-host=$VANGUARD_MONITORING_HOST"
    "--verbosity=$VANGUARD_VERBOSITY"
    "--min-sync-peers=$VAN_MIN_SYNC_PEERS"
    "--p2p-max-peers=$VAN_MAX_P2P_PEERS"
    "--orc-http-provider=$VANGUARD_ORC_RPC_PROVIDER"
    "--rpc-port=$VANGUARD_RPC_PORT"
    "--p2p-udp-port=$VANGUARD_UDP_PORT"
    "--p2p-tcp-port=$VANGUARD_TCP_PORT"
    "--grpc-gateway-port=$VANGUARD_GRPC_GATEWAY_PORT"
    "--update-head-timely"
    "--lukso-network"
  )

  if [[ -n $VANGUARD_P2P_PRIV_KEY ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-priv-key=$VANGUARD_P2P_PRIV_KEY")
  fi

  if [[ -n $VANGUARD_P2P_HOST_DNS ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-host-dns=$VANGUARD_P2P_HOST_DNS")
  elif [[ -n $OVERRIDE_VANGUARD_EXTERNAL_IP ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-host-ip=$OVERRIDE_VANGUARD_EXTERNAL_IP")
  else
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-host-ip=$EXTERNAL_IP")
  fi

  nohup vanguard \
    "${ARGUMENTS[@]}" \
    >|$LOGSDIR/vanguard/vanguard_"$RUN_DATE".log 2>&1 &
  disown
}

start_validator() {
  check_validator_requirements
  mkdir -p "$LOGSDIR"/validator
  echo -n $RUN_DATE >|"$LOGSDIR"/validator/current.tmp

  ARGUMENTS=(
    "--datadir=$DATADIR/validator/"
    "--accept-terms-of-use"
    "--beacon-rpc-provider=$VALIDATOR_BEACON_RPC_PROVIDER"
    "--chain-config-file=/opt/lukso/networks/$NETWORK/config/vanguard-config.yaml"
    "--verbosity=$VALIDATOR_VERBOSITY"
    "--pandora-http-provider=$VALIDATOR_PANDORA_HTTP_PROVIDER"
    "--wallet-dir=$WALLET_DIR"
    "--rpc"
    "--log-file=$LOGSDIR/validator/validator_$RUN_DATE.log"
    "--lukso-network"
  )

  if [[ -n $VALIDATOR_PASSWORD_FILE ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--wallet-password-file=$VALIDATOR_PASSWORD_FILE")
  fi

  nohup lukso-validator \
    "${ARGUMENTS[@]}" \
    >|$LOGSDIR/validator/validator_"$RUN_DATE".log 2>&1 &
  disown
}

start_eth2stats_client() {
  mkdir -p "$LOGSDIR"/eth2stats
  echo -n $RUN_DATE >|"$LOGSDIR"/eth2stats/current.tmp

  nohup eth2stats-client run \
    --beacon.type="prysm" \
    --beacon.addr="$ETH2STATS_BEACON_ADDR" \
    --beacon.metrics-addr="$VAN_ETHSTATS_METRICS" \
    --data.folder=$DATADIR/eth2stats-client \
    --eth2stats.node-name="$NODE_NAME" \
    --eth2stats.addr="$VAN_ETHSTATS" \
    --eth2stats.tls="false" >|"$LOGSDIR"/eth2stats/eth2stats_"$RUN_DATE".log 2>&1 &
  disown
}

start_lukso_status() {
  mkdir -p "$LOGSDIR"/lukso-status
  echo -n $RUN_DATE >|"$LOGSDIR"/lukso-status/current.tmp

  ARGUMENTS=()
  nohup lukso-status \
    "${ARGUMENTS[@]}" \
    >|$LOGSDIR/lukso-status/lukso-status"$RUN_DATE".log 2>&1 &
  disown
}

start_all() {
  if [[ "$IS_VALIDATOR" == true ]]; then
    check_validator_requirements
  fi

  echo "################# Starting orchestrator #################"
  start_orchestrator
  sleep 2

  echo "################# Starting pandora #######################"
  start_pandora
  sleep 2

  echo "################# Starting vanguard #######################"
  start_vanguard
  sleep 2

  if [[ "$IS_VALIDATOR" == true ]]; then
    echo "################# Starting validator #######################"
    start_validator
    sleep 2
  fi

  if [[ -n $VAN_ETHSTATS ]]; then
    echo "################# Starting eth2stats_client #######################"
    start_eth2stats_client
    sleep 2
  fi

  if [[ "$RUN_LUKSO_STATUS" = true ]]; then
    echo "################# Starting lukso status #######################"
    sleep 10
    start_lukso_status
    sleep 2
  fi
}

start() {

  if [[ $# -eq 0 ]]; then
    ARGUMENT="all"
  else
    ARGUMENT=$1
  fi

  echo -n "Starting: "
  case $ARGUMENT in
  orchestrator)
    echo "orchestrator client"
    start_orchestrator
    ;;
  pandora)
    echo "pandora client"
    start_pandora
    ;;
  vanguard)
    echo "vanguard client"
    start_vanguard
    ;;
  validator)
    echo "validator client"
    start_validator
    ;;
  eth2stats)
    echo "eth2stats client"
    start_eth2stats_client
    ;;
  lukso-status)
    echo "lukso-status client"
    start_lukso_status
    ;;
  *)
    echo "ALL clients"
    start_all
    ;;
  esac
}

stop_orchestrator() {
  echo -n "Stopping orchestrator client "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:7877) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:7877) &>/dev/null
    sleep 1
  fi
}

stop_pandora() {
  echo -n "Stopping pandora client... "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:30405) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:30405) &>/dev/null
    sleep 1
  fi
}

stop_vanguard() {
  echo -n "Stopping vanguard client... "

  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:4000) &>/dev/null
    sleep 1
    sudo kill -9 $(sudo lsof -t -i:12000) &>/dev/null
    sleep 1
    sudo kill -9 $(sudo lsof -t -i:13000) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:4000) &>/dev/null
    sleep 1
    sudo kill $(sudo lsof -t -i:12000) &>/dev/null
    sleep 1
    sudo kill $(sudo lsof -t -i:13000) &>/dev/null
    sleep 1
  fi
}

stop_validator() {
  echo -n "Stopping validator client... "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:7000) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:7000) &>/dev/null
    sleep 1
  fi
}

stop_eth2stats_client() {
  echo -n "Stopping eth2stats client... "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo pkill -9 "eth2stats-client*"
    sleep 1
  else
    echo
    sudo pkill "eth2stats-client*"
    sleep 1
  fi
}

stop_lukso_status() {
  echo -n "Stopping lukso-status ... "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo pkill -9 "lukso-status*"
    sleep 1
  else
    echo
    sudo pkill "lukso-status*"
    sleep 1
  fi
}

stop_all() {
  stop_validator &
  stop_vanguard &
  stop_pandora &
  stop_orchestrator &
  stop_eth2stats_client &
  stop_lukso_status
}

stop() {

  if [[ $# -eq 0 ]]; then
    ARGUMENT="all"
  else
    ARGUMENT=$1
  fi

  if [[ "$FORCE" == true ]]; then
    read -p "This may result in node data corruption. Continue? (Y/n) " var
    if [[ "$var" != "Y" ]]; then
      echo "Exiting without effect..."
      exit 0
    fi
  fi
  case "$ARGUMENT" in
  orchestrator)
    stop_orchestrator
    ;;
  pandora)
    stop_pandora
    ;;
  vanguard)
    stop_vanguard
    ;;
  validator)
    stop_validator
    ;;
  eth2stats)
    stop_eth2stats_client
    ;;
  lukso-status)
    stop_lukso_status
    ;;
  *)
    stop_all
    ;;
  esac
}

reset_orchestrator() {
  rm -rf $DATADIR/orchestrator
}

reset_pandora() {
  rm -rf $DATADIR/pandora
}

reset_vanguard() {
  rm -rf $DATADIR/vanguard
}

reset_validator() {
  rm -rf $DATADIR/validator
}

reset_eth2stats_client() {
  rm -rf $DATADIR/eth2stats-client
}

reset_all() {
  reset_orchestrator
  reset_pandora
  reset_vanguard
  reset_validator
  reset_eth2stats_client
}

reset() {

  if [[ $# -eq 0 ]]; then
    ARGUMENT="none"
  else
    ARGUMENT=$1
  fi

  case "$ARGUMENT" in
  orchestrator)
    reset_orchestrator
    ;;
  pandora)
    reset_pandora
    ;;
  vanguard)
    reset_vanguard
    ;;
  validator)
    reset_validator
    ;;
  eth2stats)
    reset_eth2stats_client
    ;;
  all)
    reset_all
    ;;
  *)
    echo "Choose a client: [orchestrator, pandora, vanguard, validator, all] "
    ;;
  esac
}

help() {
  echo "USAGE:"
  echo "lukso <command> [argument] [--flags]"
  echo
  echo "Available commands with arguments:"
  echo "start         Starts up all or specific client(s)"
  echo "               [orchestrator, pandora, vanguard, validator, eth2stats-client, lukso-status, all]"
  echo
  echo "stop          Stops all or specific client(s)"
  echo "               [orchestrator, pandora, vanguard, validator, eth2stats-client, lukso-status, all]"
  echo
  echo "reset         Clears client(s) datadirs (this also removes chain-data) 	"
  echo "               [orchestrator, pandora, vanguard, validator, all, none]"
  echo
  echo "config        Interactive tool for creating config file"
  echo
  echo "keygen        Runs lukso-deposit-cli"
  echo
  echo "wallet        Imports lukso-deposit-cli keys"
  echo
  echo "logs          Shows logs"
  echo "               [orchestrator, pandora, vanguard, validator, eth2stats-client, lukso-status]"
  echo
  echo "attach        Attaches to pandora console via IPC socket (use with --datadir if not default). You cannot reach remote HTTP or WS via this command"
  echo
  echo "bind-binaries sets client(s) to desired version, use with flags for setting tag: --orchestrator v0.2.0-rc.1, --pandora v0.2.0-rc.1, --vanguard v0.2.0-rc.1, --validator v0.2.0-rc.1"
  echo
  echo
  echo "Available commands without arguments:"
  echo "version        Shows the LUKSO script version"
  echo
  echo
  echo "Available flags:"
  echo "--network              Picks config collection to be used (and downloads if it doesn't exist)"
  echo "                       [l15-prod, l15-staging, l15-dev]"
  echo
  echo "--l15-prod             Alias for --network l15-prod"
  echo
  echo "--l15-staging          Alias for --network l15-staging"
  echo
  echo "--l15-dev              Alias for --network l15-dev"
  echo
  echo "--config               Path to config file"
  echo "                       [config.yaml]"
  echo
  echo "--datadir              Sets datadir path"
  echo "                       [Ex. /mnt/external/lukso-datadir]"
  echo
  echo "--logsdir              Sets logs path"
  echo "                       [Ex. /mnt/external/lukso-logs]"
  echo
  echo "--home                 Sets path for datadir and logs in a single location (--datadir and --logs take priority)"
  echo "                       [Ex. /var/lukso]"
  echo
  echo "--validate             Starts validator"
  echo
  echo "--coinbase             Sets pandora coinbase"
  echo "                       [ETH1 address ex. 0x616e6f6e796d6f75730000000000000000000777]"
  echo
  echo "--node-name            Name of node that's shown on pandora stats and vanguard stats"
  echo "                       [String ex. johnsmith123]"
  echo
  echo "--deposit              Sets lukso-deposit-cli tag to be used"
  echo "                       [Tag name ex. v0.2.0-rc.1]"
  echo
  echo "--eth2stats            Sets eth2stats tag to be used"
  echo "                       [Tag name ex. v0.2.0-rc.1]"
  echo
  echo "--lukso-status         Sets lukso-status tag to be used"
  echo "                       [Tag name ex. v0.2.0-rc.1]"
  echo
  echo "--orchestrator         Sets orchestrator tag to be used"
  echo "                       [Tag name ex. v0.2.0-rc.1]"
  echo
  echo "--orchestrator-verbosity Sets orchestrator logging depth"
  echo "                       [silent, error, warn, info, debug, trace]"
  echo
  echo "--pandora              Sets pandora tag to be used"
  echo "                       [Tag name ex. v0.2.0-rc.1]"
  echo
  echo "--pandora-verbosity    Sets pandora logging depth (note: pandora uses integers for that flag, script will convert those to proper values)"
  echo "                       [silent, error, warn, info, debug, trace]"
  echo
  echo "--pandora-bootnodes    Sets pandora bootnodes"
  echo "                       [Strings of bootnodes separated by commas: \"enode://72caa...,enode://b4a11a...\"]"
  echo
  echo "--pandora-http-port    Sets pandora RPC (over http) port"
  echo "                       [Number between 1023-65535]"
  echo
  echo "--pandora-metrics      Enables pandora metrics server"
  echo
  echo "--pandora-nodekey      P2P node key file"
  echo "                       [Path to file (relative or absolute)]"
  echo
  echo "--pandora-rpcvhosts    Sets pandora rpc virtual hosts (use quotes if you want to set * (\"*\") otherwise shell will resolve it"
  echo "                       [RPC vhosts]"
  echo
  echo "--pandora-external-ip  Sets external IP for pandora (overrides --external-ip if present)"
  echo "                       [72.122.32.234]"
  echo
  echo "--pandora-universal-profile-expose  Exposes \"net,eth,txpool,web3\" API's on Pandora "
  echo
  echo "--pandora-unsafe-expose  Exposes \"admin,net,eth,debug,miner,personal,txpool,web3\" API's on Pandora"
  echo
  echo "--vanguard             Sets vanguard tag to be used"
  echo "                       [Tag name ex. v0.2.0-rc.1]"
  echo
  echo "--vanguard-verbosity   Sets vanguard logging depth"
  echo "                       [silent, error, warn, info, debug, trace]"
  echo
  echo "--vanguard-bootnodes   Sets vanguard bootnodes"
  echo "                       [Strings of bootnodes separated by commas: \"enr:-Ku4QAmY...,enr:-M23QLmY...\"]"
  echo
  echo "--vanguard-p2p-priv-key The file containing the private key to use in communications with other peers."
  echo "                       [Path to file (relative or absolute)]"
  echo
  echo "--vanguard-external-ip Sets external IP for vanguard (overrides --external-ip if present)"
  echo "                       [72.122.32.234]"
  echo
  echo "--vanguard-p2p-host-dns Sets host DNS vanguard (overrides --external-ip AND --vanguard-external-ip if present)"
  echo "                       [72.122.32.234]"
  echo
  echo "--vanguard-monitoring-host Sets vanguard monitoring listening interface"
  echo "                       [IP, ex. 127.0.0.1]"
  echo
  echo "--validator            Sets validator tag to be used"
  echo "                       [Tag name ex. v0.2.0-rc.1]"
  echo
  echo "--validator-verbosity  Sets validator logging depth"
  echo "                       [silent, error, warn, info, debug, trace]"
  echo
  echo "--keys-dir             Sets directory of lukso-deposit-cli keys (can be used with \"keygen\" or \"wallet\")"
  echo "                       [Path, relative or absolute]"
  echo
  echo "--keys-password-file   Sets path to lukso-deposit-cli keys (can be used with \"keygen\" or \"wallet\")"
  echo "                       [Path, relative or absolute]"
  echo
  echo "--wallet-dir           Sets directory of lukso-validator wallet"
  echo "                       [Path, relative or absolute]"
  echo
  echo "--wallet-password-file Password for lukso-validator"
  echo "                       [Path to file]"
  echo
  echo "--cors-domain          Sets CORS domain (note: if you want to set every origin you must type asterisk wrapped in quotes '*' otherwise shell may try to resolve it"
  echo
  echo "--external-ip          Sets external IP for pandora and vanguard"
  echo "                       [72.122.32.234]"
  echo
  echo "--allow-respin         Deletes all datadirs IF network config changed (based on genesis time)"
  echo
  echo "--force                Enables force mode for stopping"
  echo
  echo "--vanguard-http-web3provider          An eth1 web3 provider string http endpoint or IPC socket path. (default: http://127.0.0.1:8545)"
  echo
  echo "--vanguard-rpc-host                   Host on which the RPC server should listen. (default: 127.0.0.1)"
  echo
  echo "--van-rpc-port                        Port on which the RPC server should listen. (default: 4000)"
  echo
  echo "--van-udp-port                        Vanguard beacon chain client UDP port. The port used by discv5. (default: 12000)"
  echo
  echo "--van-tcp-port                        Vanguard beacon chain client TCP port. The port used by libp2p. (default: 13000)"
  echo
  echo "--van-grpc-gateway-port               Vanguard gRPC gateway port. The port on which the gateway server runs on (default: 3500)"
  echo
  echo "--vanguard-orc-rpc-provider           A orchestrator string rpc endpoint. This is our orchestrator client http endpoint or socket path. (default: http://127.0.0.1:7877)"
  echo
  echo "--validator-beacon-rpc-provider       Beacon node (vanguard) RPC provider endpoint. (default: $VANGUARD_RPC)"
  echo
  echo "--validator-pandora-http-provider     A pandora string rpc endpoint. This is our pandora client http endpoint. (default: http://127.0.0.1:8545)"
  echo
  echo "--orchestrator-vanguard-rpc-endpoint  Enables Vanguard node RPC provider endpoint. (default: $VANGUARD_RPC)"
  echo
  echo "--orchestrator-pandora-rpc-endpoint   Pandora node RP provider endpoint. (default: $ORC_PANDORA_RPC)"
  echo
  echo "--eth2stats-beacon-addr               Beacon node endpoint address for eth2stats-client. (default: $VANGUARD_RPC)"
  echo
  echo "--orc-http-port                       Orchestrator HTTP port exposed. (default:  7877)"
  echo
  echo "--orc-http-addr                       Orchestrator HTTP address exposed. (default:  127.0.0.1)"
  echo
  echo "--orc-ws-port                         Orchestrator websocket port exposed. (default:  7878)"
  echo
  echo "--orc-ws-addr                         Orchestrator websocket address exposed. (default:  127.0.0.1)"
  echo
  echo "--pan-port                            Pandora client TCP/UDP port exposed. (default:  30405)"
  echo
  echo "--pan-http-addr                       Pandora client http address exposed. (default:  127.0.0.1)"
  echo
  echo "--pan-http-port                       Pandora client http port exposed. (default:  8545)"
  echo
  echo "--pan-ws-addr                         Pandora client websocket address exposed. (default:  127.0.0.1)"
  echo
  echo "--pan-ws-port                         Pandora client websocket port exposed. (default:  8546)"
  echo
  echo "--pan-http-miner-addr                 Pandora HTTP URL to notify of new work packages. (default:  http://127.0.0.1:7877)"
  echo
  echo "--pan-ws-miner-addr                   Pandora Websocket URL to notify of new work packages. (default:  ws://127.0.0.1:7878)"
  echo
  echo "--pan-ethstats                        Pandora flag to activate ethstats listing on remote dashboard. If enabled you should see your node by your node name provided via --node-name flag or lukso config. Example: --pan-ethstats token123@stats.example.com. (default:  disabled)"
  echo
  echo "--van-ethstats                        Vanguard flag to activate eth2stats listing on remote dashboard. If enabled you should see your node by your node name provided via --node-name flag or lukso config. Example: --van-ethstats 192.168.0.1:9090. (default:  disabled)"
  echo
  echo "--van-min-sync-peers                  The required number of valid Vanguard peers to connect with before syncing. (default: 2)"
  echo
  echo "--van-max-p2p-peers                   The max number of Vanguard p2p peers to maintain. (default: 50)"
  echo
  echo "--van-ethstats-metrics                The metrics address for Vanguard eth2stats-client service (default: http://127.0.0.1:8080/metrics)"
  echo
  echo "--status-page                         This flag is for lukso-status activation. With this service you can check your node status over web browser (default: disabled). Default web address is: http://127.0.0.1:8111"

  exit
}

logs() {
  case "$1" in
  orchestrator)
    CLIENT="orchestrator"
    ;;
  pandora)
    CLIENT="pandora"
    ;;
  vanguard)
    CLIENT="vanguard"
    ;;
  validator)
    CLIENT="validator"
    ;;
  eth2stats)
    CLIENT="eth2stats"
    ;;
  lukso-status)
    CLIENT="lukso-status"
    ;;
  *)
    echo "SELECT one of the clients ex. pandora"
    exit
    ;;
  esac
  CURRENT_RUN=$(<"$LOGSDIR"/"$CLIENT"/current.tmp)
  tail -f "$LOGSDIR"/"$CLIENT"/"$CLIENT"_"$CURRENT_RUN".log

}

if [[ "$1" != -* ]]; then
  COMMAND=$1
  shift
fi

if [[ "$1" != -* ]]; then
  COMMAND_ARG=$1
  shift
fi

optspec=":hv-:"
while getopts "$optspec" optchar; do
  case "${optchar}" in
  h)
    echo "usage: $0 [-v] [--loglevel[=]<value>]" >&2
    exit 2
    ;;
  -)
    case "${OPTARG}" in

    orchestrator)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary lukso-orchestrator $val
      ;;

    pandora)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary pandora $val
      ;;

    vanguard)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary vanguard $val
      ;;

    validator)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary lukso-validator $val
      ;;

    deposit)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary lukso-deposit-cli $val
      ;;

    eth2stats)
      # Temporary fix
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      mkdir -p /opt/lukso/binaries/eth2stats-client/$val

      if [[ $PLATFORM == "Linux" ]]; then
        download https://storage.googleapis.com/lukso-assets/eth2stats/eth2stats-client-linux /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client
      fi

      if [[ $PLATFORM == "Darwin" ]]; then
        download https://storage.googleapis.com/lukso-assets/eth2stats/eth2stats-client-darwin /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client
      fi

      chmod +x /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client
      ln -sf /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client /usr/local/bin/eth2stats-client

      ;;

    lukso-status)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))

      mkdir -p /opt/lukso/binaries/lukso-status/$val

      if [[ $PLATFORM == "Linux" ]]; then
        download https://github.com/rryter/node-status/releases/download/$val/lukso-status-$val-linux-amd64.tar.gz /opt/lukso/binaries/lukso-status/$val/lukso-status-$val-linux-amd64.tar.gz
        tar -xf /opt/lukso/binaries/lukso-status/$val/lukso-status-$val-linux-amd64.tar.gz -C /opt/lukso/binaries/lukso-status/$val/
      fi

      if [[ $PLATFORM == "Darwin" ]]; then
        download https://github.com/rryter/node-status/releases/download/$val/lukso-status-$val-darwin-amd64.tar.gz /opt/lukso/binaries/lukso-status/$val/lukso-status-$val-darwin-amd64.tar.gz
        tar -xf /opt/lukso/binaries/lukso-status/$val/lukso-status-$val-darwin-amd64.tar.gz -C /opt/lukso/binaries/lukso-status/$val/
      fi

      chmod +x /opt/lukso/binaries/lukso-status/$val/lukso-status
      ln -sf /opt/lukso/binaries/lukso-status/$val/lukso-status /usr/local/bin/lukso-status

      ;;

    network)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      pick_network $val
      ;;

    home)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_LUKSO_HOME=$val
      ;;

    datadir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_DATADIR=$val
      ;;

    keys-dir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_KEYS_DIR=$val
      ;;

    keys-password-file)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_KEYS_PASSWORD_FILE=$val
      ;;

    wallet-dir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_WALLET_DIR=$val
      ;;

    wallet-password-file)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_VALIDATOR_PASSWORD_FILE=$val
      ;;

    logsdir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_LOGSDIR=$val
      ;;

    l15-prod)
      pick_network l15-prod
      ;;

    l15-staging)
      pick_network l15-staging
      ;;

    l15-dev)
      pick_network l15-dev
      ;;

    config)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      USE_CONFIG_FILE=true
      CONFIG_FILE_PATH="$val"
      ;;

    coinbase)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_COINBASE="$val"
      ;;

    node-name)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_NODE_NAME="$val"
      ;;

    validate)
      OVERRIDE_IS_VALIDATOR=true
      ;;

    van-ethstats)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_WITH_ETH2STATS=$val
      ;;

    orchestrator-verbosity)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ORCHESTRATOR_VERBOSITY=$val
      ;;

    pandora-bootnodes)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_BOOTNODES=$val
      ;;

    pandora-http-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_HTTP_PORT=$val
      ;;

    pandora-metrics)
      OVERRIDE_PANDORA_METRICS=true
      ;;

    pandora-nodekey)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_PANDORA_NODEKEY=$val
      ;;

    pandora-external-ip)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_EXTERNAL_IP=$val
      ;;

    pandora-universal-profile-expose)
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_UNIVERSAL_PROFILE_EXPOSE=true
      ;;

    pandora-unsafe-expose)
      echo "🛑 Unsafe expose enabled! 🛑"
      echo "🛑 Your node may be vulnerable to attacks 🛑"
      OVERRIDE_PANDORA_UNSAFE_EXPOSE=true
      ;;

    pandora-rpcvhosts)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_RPCVHOSTS=$val
      ;;

    pan-ethstats)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_WITH_ETH1STATS=$val
      ;;

    pandora-verbosity)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_VERBOSITY=$val
      ;;

    vanguard-bootnodes)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_BOOTNODES=$val
      ;;

    vanguard-p2p-priv-key)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_VANGUARD_P2P_PRIV_KEY=$val
      ;;

    vanguard-external-ip)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_EXTERNAL_IP=$val
      ;;

    vanguard-p2p-host-dns)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_P2P_HOST_DNS=$val
      ;;

    vanguard-verbosity)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_VERBOSITY=$val
      ;;

    vanguard-http-web3provider)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_HTTP_WEB3PROVIDER=$val
      ;;

    vanguard-rpc-host)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_RPC_HOST="$val"
      ;;

    vanguard-orc-rpc-provider)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_ORC_RPC_PROVIDER=$val
      ;;

    van-min-sync-peers)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VAN_MIN_SYNC_PEERS="$val"
      ;;

    van-max-p2p-peers)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VAN_MAX_P2P_PEERS=$val
      ;;

    van-ethstats-metrics)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VAN_ETHSTATS_METRICS=$val
      ;;

    orchestrator-vanguard-rpc-endpoint)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ORCHESTRATOR_VANGUARD_RPC_ENDPOINT=$val
      ;;

    orchestrator-pandora-rpc-endpoint)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ORCHESTRATOR_PANDORA_RPC_ENDPOINT=$val
      ;;

    orc-http-address)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ORC_HTTP_ADDR=$val
      ;;

    orc-http-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ORC_HTTP_PORT=$val
      ;;

    orc-ws-address)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ORC_WS_ADDR=$val
      ;;

    orc-ws-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ORC_WS_PORT=$val
      ;;

    pan-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_PORT=$val
      ;;

    pan-http-addr)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_HTTP_ADDR=$val
      ;;

    pan-http-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_HTTP_PORT=$val
      ;;

    pan-ws-addr)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_WS_ADDR=$val
      ;;

    pan-ws-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_WS_PORT=$val
      ;;

    pan-ws-miner-addr)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PAN_WS_MINER_NOTIFY=$val
      ;;

    pan-http-miner-addr)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PAN_HTTP_MINER_NOTIFY=$val
      ;;

    van-rpc-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_RPC_PORT=$val
      ;;

    van-udp-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_UDP_PORT=$val
      ;;

    van-tcp-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_TCP_PORT=$val
      ;;

    van-grpc-gateway-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_GRPC_GATEWAY_PORT=$val
      ;;

    validator-beacon-rpc-provider)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VALIDATOR_BEACON_RPC_PROVIDER=$val
      ;;

    validator-pandora-http-provider)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VALIDATOR_PANDORA_HTTP_PROVIDER=$val
      ;;

    eth2stats-beacon-addr)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_ETH2STATS_BEACON_ADDR=$val
      ;;

    vanguard-monitoring-host)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_MONITORING_HOST="$val"
      ;;

    validator-verbosity)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VALIDATOR_VERBOSITY=$val
      ;;

    external-ip)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_EXTERNAL_IP=$val
      ;;

    cors-domain)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_CORS_DOMAIN=$val
      ;;

    allow-respin)
      OVERRIDE_ALLOW_RESPIN=true
      ;;

    status-page)
      OVERRIDE_RUN_LUKSO_STATUS=true
      ;;

    force)
      FORCE=true
      ;;

    *)
      if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
        echo "Unknown option --${OPTARG}" >&2
      fi
      ;;
    esac
    ;;

  *)
    if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
      echo "Non-option argument: '-${OPTARG}'" >&2
    fi
    ;;
  esac
done

if [[ "$USE_CONFIG_FILE" == true ]]; then
  parse_config "$CONFIG_FILE_PATH"
fi

parse_config "/opt/lukso/networks/$NETWORK/config/network-config.yaml"

# Override config file
if [[ -n $OVERRIDE_COINBASE ]]; then
  COINBASE=$OVERRIDE_COINBASE
fi

if [[ -n $OVERRIDE_NODE_NAME ]]; then
  NODE_NAME=$OVERRIDE_NODE_NAME
fi

if [[ -n $OVERRIDE_IS_VALIDATOR ]]; then
  IS_VALIDATOR=$OVERRIDE_IS_VALIDATOR
fi

if [[ -n $OVERRIDE_ORCHESTRATOR_VERBOSITY ]]; then
  ORC_VERBOSITY=$OVERRIDE_ORCHESTRATOR_VERBOSITY
fi

if [[ -n $OVERRIDE_PANDORA_BOOTNODES ]]; then
  PANDORA_BOOTNODES=$OVERRIDE_PANDORA_BOOTNODES
fi

if [[ -n $OVERRIDE_PANDORA_HTTP_PORT ]]; then
  PANDORA_HTTP_PORT=$OVERRIDE_PANDORA_HTTP_PORT
fi

if [[ -n $OVERRIDE_PANDORA_METRICS ]]; then
  PANDORA_METRICS=$OVERRIDE_PANDORA_METRICS
fi

if [[ -n $OVERRIDE_PANDORA_NODEKEY ]]; then
  PANDORA_NODEKEY=$OVERRIDE_PANDORA_NODEKEY
fi

if [[ -n $OVERRIDE_PANDORA_EXTERNAL_IP ]]; then
  PANDORA_EXTERNAL_IP=$OVERRIDE_PANDORA_EXTERNAL_IP
fi

if [[ -n $OVERRIDE_PANDORA_UNIVERSAL_PROFILE_EXPOSE ]]; then
  PANDORA_UNIVERSAL_PROFILE_EXPOSE=$OVERRIDE_PANDORA_UNIVERSAL_PROFILE_EXPOSE
fi

if [[ -n $OVERRIDE_PANDORA_UNSAFE_EXPOSE ]]; then
  PANDORA_UNSAFE_EXPOSE=$OVERRIDE_PANDORA_UNSAFE_EXPOSE
fi

if [[ -n $OVERRIDE_PANDORA_RPCVHOSTS ]]; then
  PANDORA_RPCVHOSTS=$OVERRIDE_PANDORA_RPCVHOSTS
fi

if [[ -n $OVERRIDE_WITH_ETH1STATS ]]; then
  PAN_ETHSTATS=$OVERRIDE_WITH_ETH1STATS
fi

if [[ -n $OVERRIDE_WITH_ETH2STATS ]]; then
  VAN_ETHSTATS=$OVERRIDE_WITH_ETH2STATS
fi

if [[ -n $OVERRIDE_PANDORA_VERBOSITY ]]; then
  PANDORA_VERBOSITY=$OVERRIDE_PANDORA_VERBOSITY
fi

if [[ -n $OVERRIDE_VANGUARD_BOOTNODES ]]; then
  VANGUARD_BOOTNODES=$OVERRIDE_VANGUARD_BOOTNODES
fi

if [[ -n $OVERRIDE_VANGUARD_P2P_PRIV_KEY ]]; then
  VANGUARD_P2P_PRIV_KEY=$OVERRIDE_VANGUARD_P2P_PRIV_KEY
fi

if [[ -n $OVERRIDE_VANGUARD_EXTERNAL_IP ]]; then
  VANGUARD_EXTERNAL_IP=$OVERRIDE_VANGUARD_EXTERNAL_IP
fi

if [[ -n $OVERRIDE_VANGUARD_P2P_HOST_DNS ]]; then
  VANGUARD_P2P_HOST_DNS=$OVERRIDE_VANGUARD_P2P_HOST_DNS
fi

if [[ -n $OVERRIDE_VANGUARD_VERBOSITY ]]; then
  VANGUARD_VERBOSITY=$OVERRIDE_VANGUARD_VERBOSITY
fi

if [[ -n $OVERRIDE_VALIDATOR_VERBOSITY ]]; then
  VALIDATOR_VERBOSITY=$OVERRIDE_VALIDATOR_VERBOSITY
fi

if [[ -n $OVERRIDE_EXTERNAL_IP ]]; then
  EXTERNAL_IP=$OVERRIDE_EXTERNAL_IP
fi

if [[ -n $OVERRIDE_LUKSO_HOME ]]; then
  LUKSO_HOME=$OVERRIDE_LUKSO_HOME
  DATADIR=$LUKSO_HOME/$NETWORK/datadirs
  LOGSDIR=$LUKSO_HOME/$NETWORK/logs
fi

if [[ -n $OVERRIDE_DATADIR ]]; then
  DATADIR=$OVERRIDE_DATADIR
fi

if [[ -n $OVERRIDE_VANGUARD_HTTP_WEB3PROVIDER ]]; then
  VANGUARD_HTTP_WEB3PROVIDER=$OVERRIDE_VANGUARD_HTTP_WEB3PROVIDER
fi

if [[ -n $OVERRIDE_VANGUARD_RPC_HOST ]]; then
  VANGUARD_RPC_HOST=$OVERRIDE_VANGUARD_RPC_HOST
fi

if [[ -n $OVERRIDE_VANGUARD_ORC_RPC_PROVIDER ]]; then
  VANGUARD_ORC_RPC_PROVIDER=$OVERRIDE_VANGUARD_ORC_RPC_PROVIDER
fi

if [[ -n $OVERRIDE_ORCHESTRATOR_VANGUARD_RPC_ENDPOINT ]]; then
  ORCHESTRATOR_VANGUARD_RPC_ENDPOINT=$OVERRIDE_ORCHESTRATOR_VANGUARD_RPC_ENDPOINT
fi

if [[ -n $OVERRIDE_ORCHESTRATOR_PANDORA_RPC_ENDPOINT ]]; then
  ORCHESTRATOR_PANDORA_RPC_ENDPOINT=$OVERRIDE_ORCHESTRATOR_PANDORA_RPC_ENDPOINT
fi

if [[ -n $OVERRIDE_VALIDATOR_BEACON_RPC_PROVIDER ]]; then
  VALIDATOR_BEACON_RPC_PROVIDER=$OVERRIDE_VALIDATOR_BEACON_RPC_PROVIDER
fi

if [[ -n $OVERRIDE_VALIDATOR_PANDORA_HTTP_PROVIDER ]]; then
  VALIDATOR_PANDORA_HTTP_PROVIDER=$OVERRIDE_VALIDATOR_PANDORA_HTTP_PROVIDER
fi

if [[ -n $OVERRIDE_ETH2STATS_BEACON_ADDR ]]; then
  ETH2STATS_BEACON_ADDR=$OVERRIDE_ETH2STATS_BEACON_ADDR
fi

if [[ -n $OVERRIDE_VANGUARD_MONITORING_HOST ]]; then
  VANGUARD_MONITORING_HOST=$OVERRIDE_VANGUARD_MONITORING_HOST
fi

if [[ -n $OVERRIDE_EXTERNAL_IP ]]; then
  EXTERNAL_IP=$OVERRIDE_EXTERNAL_IP
fi

if [[ -n $OVERRIDE_LOGSDIR ]]; then
  LOGSDIR=$LOGSDIR
fi

if [[ -n $OVERRIDE_KEYS_DIR ]]; then
  KEYS_DIR=$OVERRIDE_KEYS_DIR
fi

if [[ -n $OVERRIDE_KEYS_PASSWORD_FILE ]]; then
  KEYS_PASSWORD_FILE=$OVERRIDE_KEYS_PASSWORD_FILE
fi

if [[ -n $OVERRIDE_CORS_DOMAIN ]]; then
  CORS_DOMAIN=$OVERRIDE_CORS_DOMAIN
fi

if [[ -n $OVERRIDE_WALLET_DIR ]]; then
  WALLET_DIR=$OVERRIDE_WALLET_DIR
fi

if [[ -n $OVERRIDE_VALIDATOR_PASSWORD_FILE ]]; then
  VALIDATOR_PASSWORD_FILE=$OVERRIDE_VALIDATOR_PASSWORD_FILE
fi

if [[ -n $OVERRIDE_ALLOW_RESPIN ]]; then
  ALLOW_RESPIN=$OVERRIDE_ALLOW_RESPIN
fi

if [[ -n $OVERRIDE_ORC_HTTP_ADDR ]]; then
  ORC_HTTP_ADDR=$OVERRIDE_ORC_HTTP_ADDR
fi

if [[ -n $OVERRIDE_ORC_HTTP_PORT ]]; then
  ORC_HTTP_PORT=$OVERRIDE_ORC_HTTP_PORT
fi

if [[ -n $OVERRIDE_ORC_WS_ADDR ]]; then
  ORC_WS_ADDR=$OVERRIDE_ORC_WS_ADDR
fi

if [[ -n $OVERRIDE_ORC_WS_PORT ]]; then
  ORC_WS_PORT=$OVERRIDE_ORC_WS_PORT
fi

if [[ -n $OVERRIDE_PANDORA_PORT ]]; then
  PANDORA_PORT=$OVERRIDE_PANDORA_PORT
fi

if [[ -n $OVERRIDE_PANDORA_HTTP_ADDR ]]; then
  PANDORA_HTTP_ADDR=$OVERRIDE_PANDORA_HTTP_ADDR
fi

if [[ -n $OVERRIDE_PANDORA_HTTP_PORT ]]; then
  PANDORA_HTTP_PORT=$OVERRIDE_PANDORA_HTTP_PORT
fi

if [[ -n $OVERRIDE_ORC_WS_ADDR ]]; then
  ORC_WS_ADDR=$OVERRIDE_ORC_WS_ADDR
fi

if [[ -n $OVERRIDE_ORC_WS_PORT ]]; then
  ORC_WS_PORT=$OVERRIDE_ORC_WS_PORT
fi

if [[ -n $OVERRIDE_PANDORA_WS_ADDR ]]; then
  PANDORA_WS_ADDR=$OVERRIDE_PANDORA_WS_ADDR
fi

if [[ -n $OVERRIDE_PANDORA_WS_PORT ]]; then
  PANDORA_WS_PORT=$OVERRIDE_PANDORA_WS_PORT
fi

if [[ -n $OVERRIDE_PAN_WS_MINER_NOTIFY ]]; then
  PAN_WS_MINER_NOTIFY=$OVERRIDE_PAN_WS_MINER_NOTIFY
fi

if [[ -n $OVERRIDE_PAN_HTTP_MINER_NOTIFY ]]; then
  PAN_HTTP_MINER_NOTIFY=$OVERRIDE_PAN_HTTP_MINER_NOTIFY
fi

if [[ -n $OVERRIDE_VANGUARD_RPC_PORT ]]; then
  VANGUARD_RPC_PORT=$OVERRIDE_VANGUARD_RPC_PORT
fi

if [[ -n $OVERRIDE_VANGUARD_UDP_PORT ]]; then
  VANGUARD_UDP_PORT=$OVERRIDE_VANGUARD_UDP_PORT
fi

if [[ -n $OVERRIDE_VANGUARD_TCP_PORT ]]; then
  VANGUARD_TCP_PORT=$OVERRIDE_VANGUARD_TCP_PORT
fi

if [[ -n $OVERRIDE_VANGUARD_GRPC_GATEWAY_PORT ]]; then
  VANGUARD_GRPC_GATEWAY_PORT=$OVERRIDE_VANGUARD_GRPC_GATEWAY_PORT
fi

if [[ -n $OVERRIDE_VAN_MIN_SYNC_PEERS ]]; then
  VAN_MIN_SYNC_PEERS=$OVERRIDE_VAN_MIN_SYNC_PEERS
fi

if [[ -n $OVERRIDE_VAN_MAX_P2P_PEERS ]]; then
  VAN_MAX_P2P_PEERS=$OVERRIDE_VAN_MAX_P2P_PEERS
fi

if [[ -n $OVERRIDE_VAN_ETHSTATS_METRICS ]]; then
  VAN_ETHSTATS_METRICS=$OVERRIDE_VAN_ETHSTATS_METRICS
fi

if [[ -n $OVERRIDE_RUN_LUKSO_STATUS ]]; then
  RUN_LUKSO_STATUS=$OVERRIDE_RUN_LUKSO_STATUS
fi

if [[ ! -d $DATADIR ]]; then
  mkdir -p $DATADIR
fi

if [[ ! -f $DATADIR/genesis-time.txt ]]; then
  echo -n $GENESIS_TIME > $DATADIR/genesis-time.txt
fi

if [[ $ALLOW_RESPIN ]]; then
  # Check if new genesis
  if [[ $(cat $DATADIR/genesis-time.txt) != $GENESIS_TIME ]]; then
    echo "New config received, resetting datadirs"
    reset all
    echo -n $GENESIS_TIME > $DATADIR/genesis-time.txt
  fi
fi

case $COMMAND in
start)
  start $COMMAND_ARG
  ;;
stop)
  stop $COMMAND_ARG
  ;;
reset)
  reset $COMMAND_ARG
  ;;
config)
  setup_config
  ;;
keygen)
  generate_keys
  ;;
wallet)
  import_accounts
  ;;
logs)
  logs "$COMMAND_ARG"
  ;;
version)
  echo "$LUKSO_SCRIPT_VERSION"
  ;;
attach)
  pandora attach $DATADIR/pandora/geth.ipc
  ;;
bind-binaries) ;;

*)
  help
  exit 1
  ;;
esac
