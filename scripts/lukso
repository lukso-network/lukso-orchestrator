#!/usr/bin/env bash

##### binary behavior
COMMAND=$1
COMMAND_ARG=$2
USE_CONFIG_FILE=false
FORCE=false
#####

##### network info
CHAIN_ID=""
NETWORK_ID=""
PANDORA_BOOTNODES=""
PANDORA_HTTP_PORT="8545"
VANGUARD_BOOTNODES=""
ETH1_STATS_URL=""
ETH2_STATS_URL=""
#####

##### default client values
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  PLATFORM="Linux"
fi

if [[ "$OSTYPE" == "darwin"* ]]; then
  PLATFORM="Darwin"
fi

ARCHITECTURE=$(uname -m)

RUN_DATE=$(date '+%Y-%m-%d__%H-%M-%S')
NETWORK="l15"
IS_VALIDATOR=false
COINBASE="0x616e6f6e796d6f75730000000000000000000000"

if [[ "$PLATFORM" == "Linux" ]]; then
  LUKSO_HOME="$HOME/.lukso"
fi

if [[ "$PLATFORM" == "Darwin" ]]; then
  LUKSO_HOME="$HOME/Library/LUKSO"
fi

DATADIR="$LUKSO_HOME/$NETWORK/datadirs"
LOGSDIR="$LUKSO_HOME/$NETWORK/logs"
NODE_NAME="$(LC_CTYPE=C LANG=C tr -dc A-F0-9 </dev/urandom | head -c 8)"
EXTERNAL_IP=$(curl -s ident.me)
KEYS_DIR="$LUKSO_HOME/$NETWORK"
WALLET_DIR="$LUKSO_HOME/$NETWORK/vanguard_wallet"
PANDORA_METRICS=false
PANDORA_NODEKEY=""
VANGUARD_P2P_PRIV_KEY=""
VANGUARD_P2P_HOST_DNS=""
######

###### for config tool
CONFIG_DATA=()
######

function parse_yaml() {
  local prefix=""
  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @ | tr @ '\034')
  LC_CTYPE=C LANG=C sed -ne "s|^\($s\):|\1|" \
    -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
    -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" $1 |
    awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

parse_config() {
  eval $(parse_yaml $1)
}

download() {
  URL="$1"
  LOCATION="$2"
  if [[ $PLATFORM == "Linux" ]]; then
    if ! wget -q --spider "$URL"; then
      echo "File not found, check URL: $URL"
      exit
    fi
    sudo wget -O $LOCATION $URL
  fi

  if [[ $PLATFORM == "Darwin" ]]; then
    STATUS_CODE=$(curl -L -s -o /dev/null -I -w "%{http_code}" $URL)
    if [[ $STATUS_CODE != "200" ]]; then
      echo "File not found, check URL: $URL"
      exit
    fi
    sudo curl -o $LOCATION -Lk $URL
  fi
}

download_binary() {
  CLIENT="$1"
  TAG="$2"

  case $CLIENT in
  lukso-orchestrator)
    REPO="lukso-orchestrator"
    ;;

  pandora)
    REPO="pandora-execution-engine"
    ;;

  vanguard)
    REPO="vanguard-consensus-engine"
    ;;

  lukso-validator)
    REPO="vanguard-consensus-engine"
    ;;

  lukso-deposit-cli)
    REPO="network-deposit-cli"
    ;;

  esac

  mkdir -p /opt/lukso/binaries/$CLIENT/$TAG
  download https://github.com/lukso-network/"$REPO"/releases/download/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE /opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE
  sudo chmod +x /opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE
}

bind_binary() {
  CLIENT="$1"
  TAG="$2"
  if [[ ! -f /opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE ]]; then
    download_binary $CLIENT $TAG
  fi

  sudo ln -sf "/opt/lukso/binaries/$CLIENT/$TAG/$CLIENT-$PLATFORM-$ARCHITECTURE" /usr/local/bin/$CLIENT
}

bind_binaries() {
  echo
}

generate_keys() {
  read -p "Where to store deposit keys? Default: [$KEYS_DIR] " INPUT
  if [[ -n "$INPUT" ]]; then
    KEYS_DIR=$INPUT
  fi
  eval KEYS_DIR=$KEYS_DIR
  mkdir -p $KEYS_DIR
  read -p "How many validators? " VALIDATORS_NUMBER
  echo "Running lukso-deposit-cli..."
  lukso-deposit-cli new-mnemonic \
    --chain $NETWORK \
    --mnemonic_language english \
    --folder $KEYS_DIR \
    --num_validators $VALIDATORS_NUMBER
}

import_accounts() {

  if [[ -z $OVERRIDE_KEYS_DIR ]]; then
    read -p "Where do you have deposit keys? Default: [$KEYS_DIR] " KEYS_DIR
    eval KEYS_DIR="$KEYS_DIR"
  fi

  if [[ -z $OVERRIDE_WALLET_DIR ]]; then
    read -p "Where to store wallet? Default: [$WALLET_DIR] " WALLET_DIR
    eval WALLET_DIR="$WALLET_DIR"
  fi

  ARGUMENTS=(
    "--keys-dir $KEYS_DIR"
    "--wallet-dir $WALLET_DIR"
  )

  if [[ -n $KEYS_PASSWORD_FILE ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--account-password-file $KEYS_PASSWORD_FILE")
  fi

  if [[ -n $VALIDATOR_PASSWORD_FILE ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--wallet-password-file $VALIDATOR_PASSWORD_FILE")
  fi

  lukso-validator accounts import \
    --keys-dir $KEYS_DIR \
    --wallet-dir $WALLET_DIR
}

parse_config_field() {
  VALUE="$1"
  DEFAULT="$3"
  LABEL="$2 [default: $DEFAULT]: "
  read -p "$LABEL" INPUT
  eval INPUT="$INPUT"
  if [[ -z "$INPUT" ]]; then
    echo -e "\033[1A\033[2K$LABEL<Using default>"
    CONFIG_DATA+=("$VALUE: \"$DEFAULT\"")
  else
    CONFIG_DATA+=("$VALUE: \"$INPUT\"")
  fi
}

setup_config() {
  clear
  echo "This tool will create config file to be used with node."
  echo "Enter desired value or leave it empty to use default."
  echo "For paths you can use variables like \$PWD or \".\" as they will be resolved"
  echo

  mkdir -p "$LUKSO_HOME/$NETWORK"
  DEFAULT="$LUKSO_HOME/$NETWORK/config.yaml"
  LABEL="Config file location [default: $DEFAULT]: "
  read -p "$LABEL" CONFIG_LOCATION
  eval CONFIG_LOCATION="$CONFIG_LOCATION"
  if [[ -z "$CONFIG_LOCATION" ]]; then
    echo -e "\033[1A\033[2K$LABEL<Using default>"
    CONFIG_LOCATION="$DEFAULT"
  fi

  parse_config_field "COINBASE" "Enter your coinbase:" "0x616e6f6e796d6f75730000000000000000000000"
  parse_config_field "WALLET_DIR" "Type wallet location:" "$LUKSO_HOME/$NETWORK/vanguard-wallet"
  parse_config_field "DATADIR" "Type data directory (chain will be stored there) location:" "$LUKSO_HOME/$NETWORK/datadirs"
  parse_config_field "LOGSDIR" "Type logs location:" "$LUKSO_HOME/$NETWORK/logs"
  parse_config_field "NODE_NAME" "Type name of the node:" "$NETWORK-$NODE_NAME"

  echo "Saving config to $CONFIG_LOCATION"
  printf '%s\n' "${CONFIG_DATA[@]}" >|"$CONFIG_LOCATION"
}

download_network_config() {
  NETWORK=$1
  CDN="https://storage.googleapis.com/l15-cdn/networks/$NETWORK"
  sudo mkdir -p /opt/lukso/networks/$NETWORK/config
  TARGET=/opt/lukso/networks/$NETWORK/config
  echo 'UNIX'
  echo $(sha256sum $TARGET/network-config.yaml)
  download $CDN/network-config.yaml?ignoreCache=1 $TARGET/network-config.yaml
  download $CDN/pandora-genesis.json?ignoreCache=1 $TARGET/pandora-genesis.json
  download $CDN/vanguard-genesis.ssz?ignoreCache=1 $TARGET/vanguard-genesis.ssz
  download $CDN/vanguard-config.yaml?ignoreCache=1 $TARGET/vanguard-config.yaml
  download $CDN/pandora-nodes.json?ignoreCache=1 $TARGET/pandora-nodes.json
  echo $(sha256sum $TARGET/network-config.yaml)
}

pick_network() {
  NETWORK=$1
  if [[ ! -d /opt/lukso/networks/"$NETWORK" ]]; then
    download_network_config $NETWORK
  fi
}

check_validator_requirements() {
  CAN_VALIDATE=true
  if [[ ! -d $WALLET_DIR ]]; then
    echo "Cannot validate, wallet not found"
    CAN_VALIDATE=false
  fi

  if [[ -n $VALIDATOR_PASSWORD_FILE ]] && [[ ! -f $VALIDATOR_PASSWORD_FILE ]]; then
    echo "Cannot validate, password file not found"
    CAN_VALIDATE=false
  fi

  if [[ "$CAN_VALIDATE" == "false" ]]; then
    exit 1
  fi

}

start_orchestrator() {
  mkdir -p "$LOGSDIR"/orchestrator
  echo -n $RUN_DATE >|"$LOGSDIR"/orchestrator/current.tmp
  if [[ ! -d "$DATADIR/orchestrator" ]]; then
    mkdir -p $DATADIR/orchestrator
  fi
  nohup lukso-orchestrator --datadir=$DATADIR/orchestrator \
    --vanguard-grpc-endpoint=127.0.0.1:4000 \
    --http \
    --http.addr=0.0.0.0 \
    --http.port=7877 \
    --ws \
    --ws.addr=0.0.0.0 \
    --ws.port=7878 \
    --pandora-rpc-endpoint=ws://127.0.0.1:8546 \
    --verbosity=trace >|$LOGSDIR/orchestrator/orchestrator_"$RUN_DATE".log 2>&1 &
  disown
}

start_pandora() {
  mkdir -p "$LOGSDIR"/pandora
  echo -n $RUN_DATE >|"$LOGSDIR"/pandora/current.tmp
  if [[ ! -d "$DATADIR/pandora" ]]; then
    mkdir -p "$DATADIR/pandora"
  fi
  
  if [[ ! -d "$DATADIR/pandora/geth" ]]; then
    mkdir -p "$DATADIR/pandora/geth"
  fi

  pandora --datadir $DATADIR/pandora init /opt/lukso/networks/$NETWORK/config/pandora-genesis.json &>/dev/null
  cp /opt/lukso/networks/"$NETWORK"/config/pandora-nodes.json $DATADIR/pandora/geth/static-nodes.json

  ARGUMENTS=(
    "--datadir=$DATADIR/pandora"
    "--networkid=$NETWORK_ID"
    "--ethstats=$NODE_NAME:$ETH1_STATS_APIKEY@$ETH1_STATS_URL"
    "--port=30405"
    "--rpc"
    "--rpcaddr=0.0.0.0"
    "--rpcapi=admin,net,eth,debug,miner,personal,txpool,web3"
    "--bootnodes=$PANDORA_BOOTNODES" ###
    "--rpcport=$PANDORA_HTTP_PORT"
    "--http.corsdomain=*"
    "--ws"
    "--ws.addr=0.0.0.0"
    "--ws.api=admin,net,eth,debug,miner,personal,txpool,web3"
    "--ws.port=8546"
    "--ws.origins=*"
    "--mine"
    "--miner.notify=ws://127.0.0.1:7878,http://127.0.0.1:7877"
    "--miner.etherbase=$COINBASE"
    "--syncmode=full"
    "--allow-insecure-unlock"
    "--verbosity=4"
  )

  if [[ -n $OVERRIDE_PANDORA_EXTERNAL_IP ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--nat=extip:$OVERRIDE_PANDORA_EXTERNAL_IP")
  else
    ARGUMENTS=("${ARGUMENTS[@]}" "--nat=extip:$EXTERNAL_IP")
  fi

  if $PANDORA_METRICS; then
    METRICS_FLAGS=(
      "--metrics"
      "--metrics.expensive"
      "--pprof"
      "--pprof.addr=0.0.0.0"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${METRICS_FLAGS[@]}")
  fi

  if [[ -n $PANDORA_NODEKEY ]]; then
    NODEKEY_FLAGS=(
      "--nodekey=$PANDORA_NODEKEY"
    )
    ARGUMENTS=("${ARGUMENTS[@]}" "${NODEKEY_FLAGS[@]}")
  fi

  nohup pandora \
    "${ARGUMENTS[@]}" \
    >|$LOGSDIR/pandora/pandora_"$RUN_DATE".log 2>&1 &
  disown
}

start_vanguard() {
  mkdir -p "$LOGSDIR"/vanguard
  echo -n $RUN_DATE >|"$LOGSDIR"/vanguard/current.tmp
  VANGUARD_BOOTNODES=(${VANGUARD_BOOTNODES//,/ })
  BOOTNODES_ARGS=()
  for n in "${VANGUARD_BOOTNODES[@]}"; do
    BOOTNODES_ARGS+=("--bootstrap-node=$n")
  done
  ARGUMENTS=(
    "--accept-terms-of-use"
    "--chain-id=$CHAIN_ID"
    "--network-id=$NETWORK_ID"
    "--genesis-state=/opt/lukso/networks/$NETWORK/config/vanguard-genesis.ssz"
    "--datadir=$DATADIR/vanguard/"
    "--chain-config-file=/opt/lukso/networks/$NETWORK/config/vanguard-config.yaml"
    "${BOOTNODES_ARGS[@]}"
    "--http-web3provider=http://127.0.0.1:8545"
    "--deposit-contract=0x000000000000000000000000000000000000cafe"
    "--contract-deployment-block=0"
    "--rpc-host=0.0.0.0"
    "--monitoring-host=0.0.0.0"
    "--verbosity=debug"
    "--min-sync-peers=2"
    "--p2p-max-peers=50"
    "--orc-http-provider=http://127.0.0.1:7877"
    "--rpc-port=4000"
    "--p2p-udp-port=12000"
    "--p2p-tcp-port=13000"
    "--grpc-gateway-port=3500"
    "--update-head-timely"
    "--lukso-network"
  )

  if [[ -n $VANGUARD_P2P_PRIV_KEY ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-priv-key=$VANGUARD_P2P_PRIV_KEY")
  fi

  if [[ -n $VANGUARD_P2P_HOST_DNS ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-host-dns=$VANGUARD_P2P_HOST_DNS")
  elif [[ -n $OVERRIDE_VANGUARD_EXTERNAL_IP ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-host-ip=$OVERRIDE_VANGUARD_EXTERNAL_IP")
  else
    ARGUMENTS=("${ARGUMENTS[@]}" "--p2p-host-ip=$EXTERNAL_IP")
  fi

  nohup vanguard \
    "${ARGUMENTS[@]}" \
    >|$LOGSDIR/vanguard/vanguard_"$RUN_DATE".log 2>&1 &
  disown
}

start_validator() {
  check_validator_requirements
  mkdir -p "$LOGSDIR"/validator
  echo -n $RUN_DATE >|"$LOGSDIR"/validator/current.tmp

  ARGUMENTS=(
    "--datadir=$DATADIR/validator/"
    "--accept-terms-of-use"
    "--beacon-rpc-provider=localhost:4000"
    "--chain-config-file=/opt/lukso/networks/$NETWORK/config/vanguard-config.yaml"
    "--verbosity=debug"
    "--pandora-http-provider=http://127.0.0.1:8545"
    "--wallet-dir=$WALLET_DIR"
    "--rpc"
    "--log-file=$LOGSDIR/validator/validator_$RUN_DATE.log"
    "--lukso-network"
  )

  if [[ -n $VALIDATOR_PASSWORD_FILE ]]; then
    ARGUMENTS=("${ARGUMENTS[@]}" "--wallet-password-file=$VALIDATOR_PASSWORD_FILE")
  fi

  nohup lukso-validator \
    "${ARGUMENTS[@]}" \
    >|$LOGSDIR/validator/validator_"$RUN_DATE".log 2>&1 &
  disown
}

start_eth2stats_client() {
  mkdir -p "$LOGSDIR"/eth2stats
  echo -n $RUN_DATE >|"$LOGSDIR"/eth2stats/current.tmp

  nohup eth2stats-client run \
    --beacon.type="prysm" \
    --beacon.addr="127.0.0.1:4000" \
    --beacon.metrics-addr="http://127.0.0.1:8080/metrics" \
    --data.folder=$DATADIR/eth2stats-client \
    --eth2stats.node-name="$NODE_NAME" \
    --eth2stats.addr="$ETH2_STATS_URL" \
    --eth2stats.tls="false" >|"$LOGSDIR"/eth2stats/eth2stats_"$RUN_DATE".log 2>&1 &
  disown
}

start_all() {
  if [[ "$IS_VALIDATOR" == true ]]; then
    check_validator_requirements
  fi

  echo "################# Starting orchestrator #################"
  start_orchestrator
  sleep 2

  echo "################# Starting pandora #######################"
  start_pandora
  sleep 2

  echo "################# Starting vanguard #######################"
  start_vanguard
  sleep 2

  if [[ "$IS_VALIDATOR" == true ]]; then
    echo "################# Starting validator #######################"
    start_validator
    sleep 2
  fi

  echo "################# Starting eth2stats_client #######################"
  start_eth2stats_client
  sleep 2
}

start() {

  if [[ $# -eq 0 ]]; then
    ARGUMENT="all"
  else
    ARGUMENT=$1
  fi

  echo -n "Starting: "
  case $ARGUMENT in
  orchestrator)
    echo "orchestrator client"
    start_orchestrator
    ;;
  pandora)
    echo "pandora client"
    start_pandora
    ;;
  vanguard)
    echo "vanguard client"
    start_vanguard
    ;;
  validator)
    echo "validator client"
    start_validator
    ;;
  eth2stats)
    echo "eth2stats client"
    start_eth2stats_client
    ;;
  *)
    echo "ALL clients"
    start_all
    ;;
  esac
}

stop_orchestrator() {
  echo -n "Stopping orchestrator client "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:7877) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:7877) &>/dev/null
    sleep 1
  fi
}

stop_pandora() {
  echo -n "Stopping pandora client... "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:30405) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:30405) &>/dev/null
    sleep 1
  fi
}

stop_vanguard() {
  echo -n "Stopping vanguard client... "

  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:4000) &>/dev/null
    sleep 1
    sudo kill -9 $(sudo lsof -t -i:12000) &>/dev/null
    sleep 1
    sudo kill -9 $(sudo lsof -t -i:13000) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:4000) &>/dev/null
    sleep 1
    sudo kill $(sudo lsof -t -i:12000) &>/dev/null
    sleep 1
    sudo kill $(sudo lsof -t -i:13000) &>/dev/null
    sleep 1
  fi
}

stop_validator() {
  echo -n "Stopping validator client... "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo kill -9 $(sudo lsof -t -i:7000) &>/dev/null
    sleep 1
  else
    echo
    sudo kill $(sudo lsof -t -i:7000) &>/dev/null
    sleep 1
  fi
}

stop_eth2stats_client() {
  echo -n "Stopping eth2stats client... "
  if [[ "$FORCE" == true ]]; then
    echo "[FORCE]"
    sudo pkill -9 "eth2stats-client*"
    sleep 1
  else
    echo
    sudo pkill "eth2stats-client*"
    sleep 1
  fi
}

stop_all() {
  stop_validator &
  stop_vanguard &
  stop_pandora &
  stop_orchestrator &
  stop_eth2stats_client
}

stop() {

  if [[ $# -eq 0 ]]; then
    ARGUMENT="all"
  else
    ARGUMENT=$1
  fi

  if [[ "$FORCE" == true ]]; then
    read -p "This may result in node data corruption. Continue? (Y/n) " var
    if [[ "$var" != "Y" ]]; then
      echo "Exiting without effect..."
      exit 0
    fi
  fi
  case "$ARGUMENT" in
  orchestrator)
    stop_orchestrator
    ;;
  pandora)
    stop_pandora
    ;;
  vanguard)
    stop_vanguard
    ;;
  validator)
    stop_validator
    ;;
  eth2stats)
    stop_eth2stats_client
    ;;
  *)
    stop_all
    ;;
  esac
}

reset_orchestrator() {
  rm -rf $DATADIR/orchestrator
}

reset_pandora() {
  rm -rf $DATADIR/pandora
}

reset_vanguard() {
  rm -rf $DATADIR/vanguard
}

reset_validator() {
  rm -rf $DATADIR/validator
}

reset_eth2stats_client() {
  rm -rf $DATADIR/eth2stats-client
}

reset_all() {
  reset_orchestrator
  reset_pandora
  reset_vanguard
  reset_validator
  reset_eth2stats_client
}

reset() {

  if [[ $# -eq 0 ]]; then
    ARGUMENT="none"
  else
    ARGUMENT=$1
  fi

  case "$ARGUMENT" in
  orchestrator)
    reset_orchestrator
    ;;
  pandora)
    reset_pandora
    ;;
  vanguard)
    reset_vanguard
    ;;
  validator)
    reset_validator
    ;;
  eth2stats)
    reset_eth2stats_client
    ;;
  all)
    reset_all
    ;;
  *)
    echo "Choose a client: [orchestrator, pandora, vanguard, validator, all] "
    ;;
  esac
}

help() {
  echo "USAGE:"
  echo "lukso <command> [argument] [--flags]"
  echo
  echo "Available commands with arguments:"
  echo "start)         Starts up all or specific client(s)"
  echo "               [orchestrator, pandora, vanguard, validator, eth2stats-client, all]"
  echo
  echo "stop)          Stops all or specific client(s)"
  echo "               [orchestrator, pandora, vanguard, validator, eth2stats-client, all]"
  echo
  echo "reset)         Clears client(s) datadirs (this also removes chain-data) 	"
  echo "               [orchestrator, pandora, vanguard, validator, all, none]"
  echo
  echo "config)        Interactive tool for creating config file"
  echo
  echo "keygen)        Runs lukso-deposit-cli"
  echo
  echo "wallet)        Imports lukso-deposit-cli keys"
  echo
  echo "logs)          Shows logs"
  echo "               [orchestrator, pandora, vanguard, validator, eth2stats-client]"
  echo
  echo "bind-binaries) sets client(s) to desired version"
  echo
  echo
  echo "Available flags:"
  echo "--network              Picks config collection to be used"
  echo "                       [l15, l15-staging, l15-dev]"
  echo
  echo "--l15                  Alias for --network l15"
  echo
  echo "--l15-staging          Alias for --network l15-staging"
  echo
  echo "--l15-dev              Alias for --network l15-dev"
  echo
  echo "--config               Path to config file"
  echo "                       [config.yaml]"
  echo
  echo "--datadir              Sets datadir path"
  echo "                       [Ex. /mnt/external/lukso-datadir]"
  echo
  echo "--logsdir              Sets logs path"
  echo "                       [Ex. /mnt/external/lukso-logs]"
  echo
  echo "--home                 Sets path for datadir and logs in a single location (--datadir and --logs take priority)"
  echo "                       [Ex. /var/lukso]"
  echo

  echo "--validate             Starts validator"
  echo
  echo "--coinbase             Sets pandora coinbase"
  echo "                       [ETH1 address ex. 0x616e6f6e796d6f75730000000000000000000777]"
  echo
  echo "--node-name            Name of node that's shown on pandora stats and vanguard stats"
  echo "                       [String ex. johnsmith123]"
  echo
  echo "--pandora-bootnodes    Sets pandora bootnodes"
  echo "                       [Strings of bootnodes separated by commas: \"enode://72caa...,enode://b4a11a...\"]"
  echo
  echo "--pandora-http-port    Sets pandora RPC (over http) port"
  echo "                       [Number between 1023-65535]"
  echo
  echo "--pandora-metrics      Enables pandora metrics server"
  echo
  echo "--pandora-nodekey      P2P node key file"
  echo "                       [Path to file (relative or absolute)]"
  echo
  echo "--pandora-external-ip  Sets external IP for pandora (overrides --external-ip if present)"
  echo "                       [72.122.32.234]"
  echo
  echo "--vanguard-bootnodes   Sets vanguard bootnodes"
  echo "                       [Strings of bootnodes separated by commas: \"enr:-Ku4QAmY...,enr:-M23QLmY...\"]"
  echo
  echo "--vanguard-p2p-priv-key The file containing the private key to use in communications with other peers."
  echo "                       [Path to file (relative or absolute)]"
  echo
  echo "--vanguard-external-ip Sets external IP for vanguard (overrides --external-ip if present)"
  echo "                       [72.122.32.234]"
  echo
  echo "--vanguard-p2p-host-dns Sets host DNS vanguard (overrides --external-ip AND --vanguard-external-ip if present)"
  echo "                       [72.122.32.234]"
  echo
  echo "--external-ip          Sets external IP for pandora and vanguard"
  echo "                       [72.122.32.234]"
  echo
  echo "--allow-respin         Deletes all datadirs IF network config changed (based on genesis time)"
  echo
  echo "--force                Enables force mode for stopping"

  exit
}

logs() {
  case "$1" in
  orchestrator)
    CLIENT="orchestrator"
    ;;
  pandora)
    CLIENT="pandora"
    ;;
  vanguard)
    CLIENT="vanguard"
    ;;
  validator)
    CLIENT="validator"
    ;;
  eth2stats)
    CLIENT="eth2stats"
    ;;
  *)
    echo "SELECT one of the clients ex. pandora"
    exit
    ;;
  esac
  CURRENT_RUN=$(<"$LOGSDIR"/"$CLIENT"/current.tmp)
  tail -f "$LOGSDIR"/"$CLIENT"/"$CLIENT"_"$CURRENT_RUN".log

}

if [[ "$1" != -* ]]; then
  COMMAND=$1
  shift
fi

if [[ "$1" != -* ]]; then
  COMMAND_ARG=$1
  shift
fi

optspec=":hv-:"
while getopts "$optspec" optchar; do
  case "${optchar}" in
  h)
    echo "usage: $0 [-v] [--loglevel[=]<value>]" >&2
    exit 2
    ;;
  -)
    case "${OPTARG}" in

    orchestrator)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary lukso-orchestrator $val
      ;;

    pandora)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary pandora $val
      ;;

    vanguard)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary vanguard $val
      ;;

    validator)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary lukso-validator $val
      ;;

    deposit)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      bind_binary lukso-deposit-cli $val
      ;;

    eth2stats)
      # Temporary fix
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      mkdir -p /opt/lukso/binaries/eth2stats-client/$val

      if [[ $PLATFORM == "Linux" ]]; then
        download https://storage.googleapis.com/lukso-assets/eth2stats/eth2stats-client-linux /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client
      fi

      if [[ $PLATFORM == "Darwin" ]]; then
        download https://storage.googleapis.com/lukso-assets/eth2stats/eth2stats-client-darwin /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client
      fi

      chmod +x /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client
      ln -sf /opt/lukso/binaries/eth2stats-client/$val/eth2stats-client /usr/local/bin/eth2stats-client

      ;;

    network)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      pick_network $val
      ;;

    home)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_LUKSO_HOME=$val
      ;;

    datadir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_DATADIR=$val
      ;;

    keys-dir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_KEYS_DIR=$val
      ;;

    keys-password-file)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_KEYS_PASSWORD_FILE=$val
      ;;

    wallet-dir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_WALLET_DIR=$val
      ;;

    wallet-password-file)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_VALIDATOR_PASSWORD_FILE=$val
      ;;

    logsdir)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_LOGSDIR=$val
      ;;

    l15)
      pick_network l15
      ;;

    l15-staging)
      pick_network l15-staging
      ;;

    l15-dev)
      pick_network l15-dev
      ;;

    config)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      USE_CONFIG_FILE=true
      CONFIG_FILE_PATH="$val"
      ;;

    coinbase)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_COINBASE="$val"
      ;;

    node-name)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_NODE_NAME="$val"
      ;;

    validate)
      OVERRIDE_IS_VALIDATOR=true
      ;;

    pandora-bootnodes)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_BOOTNODES=$val
      ;;

    pandora-http-port)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_HTTP_PORT=$val
      ;;

    pandora-metrics)
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_METRICS=true
      ;;

    pandora-nodekey)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_PANDORA_NODEKEY=$val
      ;;

    pandora-external-ip)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_PANDORA_EXTERNAL_IP=$val
      ;;

    vanguard-bootnodes)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_BOOTNODES=$val
      ;;

    vanguard-p2p-priv-key)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      eval OVERRIDE_VANGUARD_P2P_PRIV_KEY=$val
      ;;

    vanguard-external-ip)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_EXTERNAL_IP=$val
      ;;

    vanguard-p2p-host-dns)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_VANGUARD_P2P_HOST_DNS=$val
      ;;

    external-ip)
      val="${!OPTIND}"
      OPTIND=$(($OPTIND + 1))
      OVERRIDE_EXTERNAL_IP=$val
      ;;

    allow-respin)
      OVERRIDE_ALLOW_RESPIN=true
      ;;

    force)
      FORCE=true
      ;;

    *)
      if [ "$OPTERR" = 1 ] && [ "${optspec:0:1}" != ":" ]; then
        echo "Unknown option --${OPTARG}" >&2
      fi
      ;;
    esac
    ;;

  *)
    if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
      echo "Non-option argument: '-${OPTARG}'" >&2
    fi
    ;;
  esac
done

if [[ "$USE_CONFIG_FILE" == true ]]; then
  parse_config "$CONFIG_FILE_PATH"
fi

parse_config "/opt/lukso/networks/$NETWORK/config/network-config.yaml"

# Override config file
if [[ -n $OVERRIDE_COINBASE ]]; then
  COINBASE=$OVERRIDE_COINBASE
fi

if [[ -n $OVERRIDE_NODE_NAME ]]; then
  NODE_NAME=$OVERRIDE_NODE_NAME
fi

if [[ -n $OVERRIDE_IS_VALIDATOR ]]; then
  IS_VALIDATOR=$OVERRIDE_IS_VALIDATOR
fi

if [[ -n $OVERRIDE_PANDORA_BOOTNODES ]]; then
  PANDORA_BOOTNODES=$OVERRIDE_PANDORA_BOOTNODES
fi

if [[ -n $OVERRIDE_PANDORA_HTTP_PORT ]]; then
  PANDORA_HTTP_PORT=$OVERRIDE_PANDORA_HTTP_PORT
fi

if [[ -n $OVERRIDE_PANDORA_METRICS ]]; then
  PANDORA_METRICS=$OVERRIDE_PANDORA_METRICS
fi

if [[ -n $OVERRIDE_PANDORA_NODEKEY ]]; then
  PANDORA_NODEKEY=$OVERRIDE_PANDORA_NODEKEY
fi

if [[ -n $OVERRIDE_PANDORA_EXTERNAL_IP ]]; then
  PANDORA_EXTERNAL_IP=$OVERRIDE_PANDORA_EXTERNAL_IP
fi

if [[ -n $OVERRIDE_VANGUARD_BOOTNODES ]]; then
  VANGUARD_BOOTNODES=$OVERRIDE_VANGUARD_BOOTNODES
fi

if [[ -n $OVERRIDE_VANGUARD_P2P_PRIV_KEY ]]; then
  VANGUARD_P2P_PRIV_KEY=$OVERRIDE_VANGUARD_P2P_PRIV_KEY
fi

if [[ -n $OVERRIDE_VANGUARD_EXTERNAL_IP ]]; then
  VANGUARD_EXTERNAL_IP=$OVERRIDE_VANGUARD_EXTERNAL_IP
fi

if [[ -n $OVERRIDE_VANGUARD_P2P_HOST_DNS ]]; then
  VANGUARD_P2P_HOST_DNS=$OVERRIDE_VANGUARD_P2P_HOST_DNS
fi

if [[ -n $OVERRIDE_EXTERNAL_IP ]]; then
  EXTERNAL_IP=$OVERRIDE_EXTERNAL_IP
fi

if [[ -n $OVERRIDE_LUKSO_HOME ]]; then
  LUKSO_HOME=$OVERRIDE_LUKSO_HOME
  DATADIR=$LUKSO_HOME/$NETWORK/datadirs
  LOGSDIR=$LUKSO_HOME/$NETWORK/logs
fi

if [[ -n $OVERRIDE_DATADIR ]]; then
  DATADIR=$OVERRIDE_DATADIR
fi

if [[ -n $OVERRIDE_LOGSDIR ]]; then
  LOGSDIR=$LOGSDIR
fi

if [[ -n $OVERRIDE_KEYS_DIR ]]; then
  KEYS_DIR=$OVERRIDE_KEYS_DIR
fi

if [[ -n $OVERRIDE_KEYS_PASSWORD_FILE ]]; then
  KEYS_PASSWORD_FILE=$OVERRIDE_KEYS_PASSWORD_FILE
fi

if [[ -n $OVERRIDE_WALLET_DIR ]]; then
  WALLET_DIR=$OVERRIDE_WALLET_DIR
fi

if [[ -n $OVERRIDE_VALIDATOR_PASSWORD_FILE ]]; then
  VALIDATOR_PASSWORD_FILE=$OVERRIDE_VALIDATOR_PASSWORD_FILE
fi

if [[ -n $OVERRIDE_ALLOW_RESPIN ]]; then
  ALLOW_RESPIN=$OVERRIDE_ALLOW_RESPIN
fi

if [[ ! -d $DATADIR ]]; then
  mkdir -p $DATADIR
fi

if [[ ! -f $DATADIR/genesis-time.txt ]]; then
  echo -n $GENESIS_TIME > $DATADIR/genesis-time.txt
fi

if [[ $ALLOW_RESPIN ]]; then
  # Check if new genesis
  if [[ $(cat $DATADIR/genesis-time.txt) != $GENESIS_TIME ]]; then
    echo "New config received, resetting datadirs"
    reset all
    echo -n $GENESIS_TIME > $DATADIR/genesis-time.txt
  fi
fi

case $COMMAND in
start)
  start $COMMAND_ARG
  ;;
stop)
  stop $COMMAND_ARG
  ;;
reset)
  reset $COMMAND_ARG
  ;;
config)
  setup_config
  ;;
keygen)
  generate_keys
  ;;
wallet)
  import_accounts
  ;;
logs)
  logs "$COMMAND_ARG"
  ;;
attach)
  pandora attach $DATADIR/pandora/geth.ipc
  ;;
bind-binaries) ;;

*)
  help
  exit 1
  ;;
esac
