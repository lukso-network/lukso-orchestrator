// Code generated by MockGen. DO NOT EDIT.
// Source: ../../orchestrator/db/iface/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "github.com/lukso-network/lukso-orchestrator/shared/types"
	reflect "reflect"
)

// MockReadOnlyDatabase is a mock of ReadOnlyDatabase interface
type MockReadOnlyDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyDatabaseMockRecorder
}

// MockReadOnlyDatabaseMockRecorder is the mock recorder for MockReadOnlyDatabase
type MockReadOnlyDatabaseMockRecorder struct {
	mock *MockReadOnlyDatabase
}

// NewMockReadOnlyDatabase creates a new mock instance
func NewMockReadOnlyDatabase(ctrl *gomock.Controller) *MockReadOnlyDatabase {
	mock := &MockReadOnlyDatabase{ctrl: ctrl}
	mock.recorder = &MockReadOnlyDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReadOnlyDatabase) EXPECT() *MockReadOnlyDatabaseMockRecorder {
	return m.recorder
}

// ConsensusInfo mocks base method
func (m *MockReadOnlyDatabase) ConsensusInfo(ctx context.Context, epoch uint64) (*types.MinimalEpochConsensusInfoV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusInfo", ctx, epoch)
	ret0, _ := ret[0].(*types.MinimalEpochConsensusInfoV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsensusInfo indicates an expected call of ConsensusInfo
func (mr *MockReadOnlyDatabaseMockRecorder) ConsensusInfo(ctx, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusInfo", reflect.TypeOf((*MockReadOnlyDatabase)(nil).ConsensusInfo), ctx, epoch)
}

// ConsensusInfos mocks base method
func (m *MockReadOnlyDatabase) ConsensusInfos(fromEpoch uint64) ([]*types.MinimalEpochConsensusInfoV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusInfos", fromEpoch)
	ret0, _ := ret[0].([]*types.MinimalEpochConsensusInfoV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsensusInfos indicates an expected call of ConsensusInfos
func (mr *MockReadOnlyDatabaseMockRecorder) ConsensusInfos(fromEpoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusInfos", reflect.TypeOf((*MockReadOnlyDatabase)(nil).ConsensusInfos), fromEpoch)
}

// LatestSavedEpoch mocks base method
func (m *MockReadOnlyDatabase) LatestSavedEpoch() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestSavedEpoch")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestSavedEpoch indicates an expected call of LatestSavedEpoch
func (mr *MockReadOnlyDatabaseMockRecorder) LatestSavedEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestSavedEpoch", reflect.TypeOf((*MockReadOnlyDatabase)(nil).LatestSavedEpoch))
}

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// ConsensusInfo mocks base method
func (m *MockDatabase) ConsensusInfo(ctx context.Context, epoch uint64) (*types.MinimalEpochConsensusInfoV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusInfo", ctx, epoch)
	ret0, _ := ret[0].(*types.MinimalEpochConsensusInfoV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsensusInfo indicates an expected call of ConsensusInfo
func (mr *MockDatabaseMockRecorder) ConsensusInfo(ctx, epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusInfo", reflect.TypeOf((*MockDatabase)(nil).ConsensusInfo), ctx, epoch)
}

// ConsensusInfos mocks base method
func (m *MockDatabase) ConsensusInfos(fromEpoch uint64) ([]*types.MinimalEpochConsensusInfoV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusInfos", fromEpoch)
	ret0, _ := ret[0].([]*types.MinimalEpochConsensusInfoV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsensusInfos indicates an expected call of ConsensusInfos
func (mr *MockDatabaseMockRecorder) ConsensusInfos(fromEpoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusInfos", reflect.TypeOf((*MockDatabase)(nil).ConsensusInfos), fromEpoch)
}

// LatestSavedEpoch mocks base method
func (m *MockDatabase) LatestSavedEpoch() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestSavedEpoch")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestSavedEpoch indicates an expected call of LatestSavedEpoch
func (mr *MockDatabaseMockRecorder) LatestSavedEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestSavedEpoch", reflect.TypeOf((*MockDatabase)(nil).LatestSavedEpoch))
}

// SaveConsensusInfo mocks base method
func (m *MockDatabase) SaveConsensusInfo(ctx context.Context, consensusInfo *types.MinimalEpochConsensusInfoV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConsensusInfo", ctx, consensusInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConsensusInfo indicates an expected call of SaveConsensusInfo
func (mr *MockDatabaseMockRecorder) SaveConsensusInfo(ctx, consensusInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConsensusInfo", reflect.TypeOf((*MockDatabase)(nil).SaveConsensusInfo), ctx, consensusInfo)
}

// SaveLatestEpoch mocks base method
func (m *MockDatabase) SaveLatestEpoch(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLatestEpoch", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLatestEpoch indicates an expected call of SaveLatestEpoch
func (mr *MockDatabaseMockRecorder) SaveLatestEpoch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLatestEpoch", reflect.TypeOf((*MockDatabase)(nil).SaveLatestEpoch), ctx)
}

// DatabasePath mocks base method
func (m *MockDatabase) DatabasePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabasePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabasePath indicates an expected call of DatabasePath
func (mr *MockDatabaseMockRecorder) DatabasePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabasePath", reflect.TypeOf((*MockDatabase)(nil).DatabasePath))
}

// ClearDB mocks base method
func (m *MockDatabase) ClearDB() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDB")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDB indicates an expected call of ClearDB
func (mr *MockDatabaseMockRecorder) ClearDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDB", reflect.TypeOf((*MockDatabase)(nil).ClearDB))
}
