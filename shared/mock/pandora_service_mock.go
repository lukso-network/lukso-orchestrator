// Code generated by MockGen. DO NOT EDIT.
// Source: ../../orchestrator/pandorachain/iface/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
	types "github.com/lukso-network/lukso-orchestrator/shared/types"
	reflect "reflect"
)

// MockPandoraChainService is a mock of PandoraChainService interface
type MockPandoraChainService struct {
	ctrl     *gomock.Controller
	recorder *MockPandoraChainServiceMockRecorder
}

// MockPandoraChainServiceMockRecorder is the mock recorder for MockPandoraChainService
type MockPandoraChainServiceMockRecorder struct {
	mock *MockPandoraChainService
}

// NewMockPandoraChainService creates a new mock instance
func NewMockPandoraChainService(ctrl *gomock.Controller) *MockPandoraChainService {
	mock := &MockPandoraChainService{ctrl: ctrl}
	mock.recorder = &MockPandoraChainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPandoraChainService) EXPECT() *MockPandoraChainServiceMockRecorder {
	return m.recorder
}

// SubscribePendingHeaders mocks base method
func (m *MockPandoraChainService) SubscribePendingHeaders(ctx context.Context, crit *types.PandoraPendingHeaderFilter, namespace string, client *rpc.Client) (*rpc.ClientSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribePendingHeaders", ctx, crit, namespace, client)
	ret0, _ := ret[0].(*rpc.ClientSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribePendingHeaders indicates an expected call of SubscribePendingHeaders
func (mr *MockPandoraChainServiceMockRecorder) SubscribePendingHeaders(ctx, crit, namespace, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribePendingHeaders", reflect.TypeOf((*MockPandoraChainService)(nil).SubscribePendingHeaders), ctx, crit, namespace, client)
}
